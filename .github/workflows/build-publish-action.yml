name: Build and Publish
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Build CLI
        run: |
          GOOS=$(echo ${{ matrix.os }} | cut -d- -f1 | sed 's/ubuntu/linux/')
          GOARCH=${{ matrix.arch }}
          EXT=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            GOOS=windows
            EXT=.exe
          fi
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            GOOS=darwin
          fi
          GOOS=${GOOS} GOARCH=${GOARCH} go build -o dist/openapi-converter-${GOOS}-${GOARCH}${EXT} ./cmd
        shell: bash
      
      - name: Run tests
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        run: make test
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-converter-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/openapi-converter-*
  
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major_version=${VERSION%%.*}" >> $GITHUB_OUTPUT
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Prepare release assets
        run: |
          cd dist
          for dir in */; do
            cd "$dir"
            for file in openapi-converter-*; do
              mv "$file" "../$file"
            done
            cd ..
            rm -rf "$dir"
          done
          ls -la
      
      - name: Update Major Version Tag
        run: |
          git config user.name "${GIT_USER_NAME:-GitHub Actions}"
          git config user.email "${GIT_USER_EMAIL:-actions@github.com}"
          
          MAJOR_VERSION="${{ steps.version.outputs.major_version }}"
          
          git tag -fa "$MAJOR_VERSION" -m "Update $MAJOR_VERSION tag to ${{ steps.version.outputs.version }}"
          git push origin "$MAJOR_VERSION" --force
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: dist/openapi-converter-*
          body: |
            ## OpenAPI Converter ${{ steps.version.outputs.version }}
            
            ### Installation
            
            #### CLI Binary
            Download the appropriate binary for your platform from the assets below.
            
            #### Go Install
            ```bash
            go install github.com/nimling/openapi-converter@${{ steps.version.outputs.version }}
            ```
            
            #### GitHub Action
            ```yaml
            - uses: nimling/openapi-converter@${{ steps.version.outputs.major_version }}
              with:
                openapi-file: spec.yml
                docs-dir: output
                common-prefix: api
                write-introduction: true
            ```
            
            ### Full Changelog
            https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.major_version }}...${{ steps.version.outputs.version }}
          draft: false
          prerelease: false